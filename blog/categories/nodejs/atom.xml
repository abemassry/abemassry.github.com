<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: nodejs | Abe Massry]]></title>
  <link href="http://abemassry.com/blog/categories/nodejs/atom.xml" rel="self"/>
  <link href="http://abemassry.com/"/>
  <updated>2014-02-25T13:49:59-05:00</updated>
  <id>http://abemassry.com/</id>
  <author>
    <name><![CDATA[Abe Massry]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Building wsend]]></title>
    <link href="http://abemassry.com/blog/2014/02/14/building-wsend/"/>
    <updated>2014-02-14T12:11:00-05:00</updated>
    <id>http://abemassry.com/blog/2014/02/14/building-wsend</id>
    <content type="html"><![CDATA[<p>I wanted to write a post about the technical aspect of building wsend, after <a href="https://twitter.com/jonmarkgo">Jon Gottfried</a> suggested I write one. Thanks Jon</p>

<h2>Motivation</h2>

<p>As any technical project I undertake, I like to explain the motivation behind the project.  What is the end state of the project? What is the final product supposed to look like? Most of the time I have an answer to these questions before I start.  With wsend the answer was clear, a command line program that gave you a URL for a file up to 10GB in size. It should be simple to install and quick to use and not require any type of complicated setup.  There are other command line tools for sending files but they either require me to put in additional information about where I am sending the file like scp, or I have to set this sort of thing up before I start.  So I had this idea in mind to scratch my own itch and hopefully you find it useful too. (More motivation also came from: <a href="http://xkcd.com/949/">http://xkcd.com/949/</a>).</p>

<p><a href="http://xkcd.com/949/"><img src="https://wsend.net/85a497041dfd921da6d5fca49ccc3caf/file_transfer.png"></a></p>

<h2>Server Side</h2>

<p>Any time I'm working on a service that uploads a file, I like to start out on the back end.  The reason for this is because we have straightforward tools for sending files like HTML upload forms and curl; but many tools for accepting an upload on the server.</p>

<p>My first attempt for a different website was to use PHP.</p>

<ul>
<li>I had found that PHP ran into a 2GB file upload limit, even when running on a 64bit machine.</li>
<li>So my next option was Perl and nginx.</li>
<li>Perl could handle a large file and so could nginx, but in order to link the two together I needed FastCGI.</li>
<li>I ran into a similar 2GB file upload limit with FastCGI.</li>
<li>So the next option was node.js</li>
</ul>


<p>I was able to upload a file up to 10GB and it worked using node.  This worked out really well because the application is the server, there's no layer in between.</p>

<p>The rest of the backend is a standard <a href="http://expressjs.com/">express</a> app that exposes a simple <a href="https://github.com/abemassry/wsend#api">API</a> using POST for all communication.  And all this can be set up using curl on the client side for testing.</p>

<p>And here is an example of the express route used to handle the upload.</p>

<p>``` javascript Express Upload Example
// upload file from command line
app.post('/upload_cli', function(req, res) {
  var userID = req.param('uid');
  var now = new Date();
  if (userID) {</p>

<pre><code>models.users.findOne({user_id: userID}, function (err, doc) {
  if (err) throw err;
  if (doc.user_id) {
    var filesize = req.files.filehandle.size;
    var filesizeInt = parseInt(filesize);
    var filename=req.files.filehandle.name;

    // newpath needs a unique folder,
    var uniqueDir = getUniqueDir();
    var newDir = __dirname + "/uploads"+'/'+ uniqueDir + '/';

    fs.mkdir(newDir, 0744, function (err) {
      if(err) { throw err; }
      var newPath = __dirname + "/uploads"+'/'+ uniqueDir + '/' +filename;

      //add a check to make sure newpath is writable
      fs.rename(req.files.filehandle.path, newPath, function(err) {
        if (err) throw err;
        var permalink = "https://wsend.net/"+ uniqueDir + '/' + filename;
        doc.files.push({timestamp: now, 
                        filename: filename, 
                        type: '', 
                        size: filesizeInt, 
                        dir: newPath, 
                        permalink: permalink, 
                        permissions: ''
                      });
        // save file location to db
        doc.save(function(err) {
          if (err) throw err;
        });
        // send permalink as response
        res.send(permalink);
      });
    });
  }
});
</code></pre>

<p>  }
});</p>

<p>```</p>

<p>Express makes it really easy to handle the file upload. The properties of the file are stored in <code>req.files.filehandle</code> and you save the file to the file system with <code>fs.rename</code> which comes from the fs module of nodejs and you get it with a <code>var fs = require('fs');</code>.</p>

<p>The files are stored on the same server as everything else, while this is not optimal and a service like <a href="https://aws.amazon.com/s3/">S3</a> or a private fileserver should be used, this is small scale right now and when the usage grows an alternative file storage system can be explored.  All transfers happen using https and you can encrypt your file before it leaves your computer with a handy script called <a href="https://github.com/abemassry/wsend-gpg">wsend-gpg</a> which I describe later.</p>

<h2>Client Side</h2>

<p>Now that we have a server setup with an API that accepts uploads and gives you a URL for a file we can do a lot of fun things on the client.  So the first thing to do was write a command line script to handle all of these API calls using curl.</p>

<p>Which language to chose for a command line script?</p>

<ul>
<li>Perl is widely deployed on most Unix / Linux / Mac systems.</li>
<li>In order to install a progress bar CPAN was needed.</li>
<li>CPAN has to be set up on the client's machine</li>
<li>Bash is the default shell on many Unix installations</li>
<li>Bash is a scripting language.</li>
<li>cURL has its own built in progress bar.</li>
<li>Use bash and curl.</li>
</ul>


<p>So I started working on the <a href="https://github.com/abemassry/wsend">CLI</a>.  After all the setup that the script does automatically it comes down to one command.
<code>bash wsend command
wsend file.txt
</code></p>

<p>And it returns you a URL.</p>

<p>Here is the function inside the script that sets everything up and actually sends the file.</p>

<p>``` bash wsend upload function</p>

<p>sendFile() {
  if [[ -e "$fileOrDirToSend" ]]; then</p>

<pre><code>if [ -d "$fileOrDirToSend" ]; then
  #we want to send a directory, so make a compressed archive
  fileOrDirToSend=${fileOrDirToSend%/}
  tar cfj "$fileOrDirToSend.tar.bz2" "$fileOrDirToSend"
  fileToSend="$fileOrDirToSend.tar.bz2"
elif [ -e "$fileOrDirToSend" ]; then
  fileToSend=$fileOrDirToSend
fi

if [ "$clientOS" == "Darwin" ]; then
  fileToSendSize=$(stat -f %z "$fileToSend")
else
  fileToSendSize=$(stat -c%s "$fileToSend")
fi

getAccountSpace
if [ "$accountSizeAvailable" == "not enough space in your account for this transfer" ]; then
  notEnoughSpaceErr
elif [ "$accountSizeAvailable" == "file is too big for your account size" ]; then
  filesizeTooLarge
else
  if [[ $link ]]; then   
    #link was provided, so update target link with file
    curlReturn=$(curl -F "uid=$id" -F "link=$link" -F "filehandle=@$fileToSend" $host/update_cli)
  else
    #simply create a new one
    curlReturn=$(curl -F "uid=$id" -F "filehandle=@$fileToSend" $host/upload_cli)
    echo "$curlReturn|$(make_absolute "$fileOrDirToSend")" &gt;&gt; "$wsend_base/.list"
  fi
  echo $curlReturn
fi

if [ -d "$fileOrDirToSend" ]; then
  #remove our temporary file
  rm "$fileToSend"
fi
</code></pre>

<p>  elif [ "$fileSendBool" == "true" ]; then</p>

<pre><code>#want to send file, but source doesn't exist
echoUsage="true"
</code></pre>

<p>  fi
}</p>

<p>```</p>

<p>Inside the script this is the main command that actually sends your file.</p>

<p><code>bash curl the file
curl -F "uid=$id" -F "filehandle=@$fileToSend" $host/upload_cli
</code></p>

<p>Where <code>$host</code> is <code>https://wsend.net</code>.  The return of that command is your URL. Its really simple, but sometimes simple works out the best.</p>

<h2>Other Client Possibilities</h2>

<p>Now that we have an API and a command line utility we can do some interesting stuff:</p>

<ul>
<li>We can write a script to auto upload an image and get a link that shows up as a <a href="http://abemassry.com/blog/2013/09/09/wsend-twitter-card/">Twitter Card</a>.</li>
<li>We can write a program to provide <a href="https://github.com/abemassry/wsend-gpg">end to end encryption</a></li>
<li>We can write a new <a href="https://github.com/abemassry/node-wsend">client</a> in nodejs as well.</li>
<li>We can make a <a href="https://wsend.net/upload">Drag and Drop GUI</a> website interface.</li>
<li>We can upload an html file and have it render in the browser, even a <a href="https://wsend.net/014c82d83470b9c45efc6fdaddb00109/">slideshow</a> using <a href="http://lab.hakim.se/reveal-js/#/">reveal.js</a>.</li>
<li>Even a <a href="https://github.com/abemassry/wsend-static">static site generator</a> (still under development [in pre-alpha] though)</li>
</ul>


<p>Future projects like these could include:</p>

<ul>
<li>Writing clients in Ruby, Python, Perl, C ...</li>
<li>Distributing with rubygems, pip, CPAN, apt, yum, pacman ...</li>
<li>Or anything else you can thing of and do.</li>
</ul>


<h2>Outcome</h2>

<p>It's been a really good learning experience and it has been my first opportunity to work with others in open source on my projects, usually I'm a contributor to someone else's project but when people are submitting me code to review and incorporate into my open source project I really get a feeling that the community is working together as a whole.  Its really amazing that people believe in my ideas and like them enough to contribute and I'm really grateful for the help.  It was really exciting to get my first pull request and I hope to work with others on this in the future.</p>

<p>Thanks Jon, for encouraging me to write this post.</p>

<p>Check out the site at <a href="https://wsend.net">https://wsend.net</a></p>

<p>Follow me on twitter <a href="https://twitter.com/abemassry">@abemassry</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Creating and Displaying subdocs and Nested Data with mongodb and nodejs]]></title>
    <link href="http://abemassry.com/blog/2012/12/18/creating-and-displaying-subdocs-and-nested-data-with-mongodb-and-nodejs/"/>
    <updated>2012-12-18T13:27:00-05:00</updated>
    <id>http://abemassry.com/blog/2012/12/18/creating-and-displaying-subdocs-and-nested-data-with-mongodb-and-nodejs</id>
    <content type="html"><![CDATA[<p>If I was using MySQL and creating tables for a relational database I have a couple of ways to show comments and likes for an article on a blog for example.  The first way is to select my post from a table and then based on that ID of the post select my comments and likes for that post.  If I have properly normalized my tables this works well.  The problem with this is requires extra processing in my application code.  The next way is to use a join and write MySQL code to join the tables where there is a match and output the results.  This is ok but it requires more MySQL processing.</p>

<p>The question becomes how to do this in mongodb, a document oriented database without tables.  This turns out to be simpler to do and understand than the MySQL equivalent.</p>

<h3>1. Set up your document Schema</h3>

<p>For this code I'm using Node.js and mongoose to talk to mongodb, and jade to display.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Set Up Schema - schema.js </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'>  <span class="kd">var</span> <span class="nx">Likes</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Schema</span><span class="p">({</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="nx">like_id</span><span class="o">:</span> <span class="nx">ObjectId</span><span class="p">,</span>
</span><span class='line'><span class="nx">name</span><span class="o">:</span> <span class="nb">String</span><span class="p">,</span>
</span><span class='line'><span class="nx">date_liked</span><span class="o">:</span> <span class="nb">Date</span><span class="p">,</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="p">});</span>
</span><span class='line'>  <span class="nx">exports</span><span class="p">.</span><span class="nx">Likes</span> <span class="o">=</span> <span class="nx">mongoose</span><span class="p">.</span><span class="nx">model</span><span class="p">(</span><span class="s1">&#39;Likes&#39;</span><span class="p">,</span> <span class="nx">Likes</span><span class="p">);</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="kd">var</span> <span class="nx">Comments</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Schema</span><span class="p">({</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="nx">comment_id</span><span class="o">:</span> <span class="nx">ObjectId</span><span class="p">,</span>
</span><span class='line'><span class="nx">user</span><span class="o">:</span> <span class="nb">String</span><span class="p">,</span>
</span><span class='line'><span class="nx">user_photo</span><span class="o">:</span> <span class="nb">String</span><span class="p">,</span>
</span><span class='line'><span class="nx">body</span><span class="o">:</span> <span class="nb">String</span><span class="p">,</span>
</span><span class='line'><span class="nx">date_commented</span><span class="o">:</span> <span class="nb">Date</span><span class="p">,</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="p">});</span>
</span><span class='line'>  <span class="nx">exports</span><span class="p">.</span><span class="nx">Comments</span> <span class="o">=</span> <span class="nx">mongoose</span><span class="p">.</span><span class="nx">model</span><span class="p">(</span><span class="s1">&#39;Comments&#39;</span><span class="p">,</span> <span class="nx">Comments</span><span class="p">);</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="kd">var</span> <span class="nx">schema</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Schema</span><span class="p">({</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="nx">blog_id</span><span class="o">:</span> <span class="nx">ObjectId</span><span class="p">,</span>
</span><span class='line'><span class="nx">body</span><span class="o">:</span> <span class="nb">String</span><span class="p">,</span>
</span><span class='line'><span class="nx">lang</span><span class="o">:</span> <span class="nb">String</span><span class="p">,</span>
</span><span class='line'><span class="nx">title</span><span class="o">:</span> <span class="nb">String</span><span class="p">,</span>
</span><span class='line'><span class="nx">date</span><span class="o">:</span> <span class="nb">Date</span><span class="p">,</span>
</span><span class='line'><span class="nx">submitted_by</span><span class="o">:</span> <span class="nb">String</span><span class="p">,</span>
</span><span class='line'><span class="nx">submitted_by_photo</span><span class="o">:</span> <span class="nb">String</span><span class="p">,</span>
</span><span class='line'><span class="nx">likes</span><span class="o">:</span> <span class="p">[</span><span class="nx">Likes</span><span class="p">],</span>
</span><span class='line'><span class="nx">comments</span><span class="o">:</span> <span class="p">[</span><span class="nx">Comments</span><span class="p">]</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="p">});</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The main schema is the "var schema" this is the blog post.  The blog post contains likes and comments, of each there will be many.  Those are stored in objects and there can be multiple objects in each of the likes and comments.  The advantage of this is that you can make one database call and get all the information about a post at once, so you need less application to database communication.  And it is also easier to understand when you think about this.  For example you can add a tag schema store in another object and it can have an arbitrary number of tags.</p>

<h3>2. Reading nested Data out from mongodb</h3>

<p>Here I'm using an express app to read the data out and send it to a jade file for displaying.
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Reading data from mongodb in nodejs using mongoose  - read.js </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;/blog/:id&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">){</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="k">if</span> <span class="p">(</span><span class="nx">req</span><span class="p">.</span><span class="nx">user</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">username</span> <span class="o">=</span> <span class="nx">req</span><span class="p">.</span><span class="nx">user</span><span class="p">.</span><span class="nx">username</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="c1">//get the example</span>
</span><span class='line'><span class="nx">models</span><span class="p">.</span><span class="nx">posts</span><span class="p">.</span><span class="nx">findById</span><span class="p">(</span><span class="nx">req</span><span class="p">.</span><span class="nx">params</span><span class="p">.</span><span class="nx">id</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">data</span><span class="p">){</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">models</span><span class="p">.</span><span class="nx">users</span><span class="p">.</span><span class="nx">findOne</span><span class="p">({</span><span class="nx">name</span><span class="o">:</span> <span class="nx">username</span><span class="p">},</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">userdata</span><span class="p">){</span>
</span><span class='line'>     <span class="c1">//render the view page</span>
</span><span class='line'>     <span class="nx">res</span><span class="p">.</span><span class="nx">render</span><span class="p">(</span><span class="s1">&#39;blog.jade&#39;</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>         <span class="nx">locals</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>           <span class="nx">title</span><span class="o">:</span> <span class="nx">data</span><span class="p">.</span><span class="nx">title</span><span class="p">,</span>
</span><span class='line'>           <span class="nx">page</span><span class="o">:</span> <span class="s1">&#39;&#39;</span><span class="p">,</span>
</span><span class='line'>           <span class="nx">article</span><span class="o">:</span> <span class="nx">data</span><span class="p">,</span>
</span><span class='line'>           <span class="nx">user</span><span class="o">:</span> <span class="nx">username</span><span class="p">,</span>
</span><span class='line'>           <span class="nx">userdata</span><span class="o">:</span> <span class="nx">userdata</span>
</span><span class='line'>         <span class="p">}</span>
</span><span class='line'>     <span class="p">});</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">res</span><span class="p">.</span><span class="nx">redirect</span><span class="p">(</span><span class="s1">&#39;/404&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="p">});</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>There are no differences here reading from a mongodb doc that has nested data vs non nested data.</p>

<h3>3. Output the data in jade.</h3>

<p>There are two each loops that run through the nested data.  If there are multiple nested data on a page, like the main page of the blog, then you can loop through the blog articles and then have a sub loop for each of the comment sections.
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Displaying nested data in jade  - blog.jade </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='jade'><span class='line'><span class="p">-</span> <span class="n">each</span> <span class="n">like</span> <span class="n">in</span> <span class="n">article</span><span class="o">.</span><span class="n">likes</span>
</span><span class='line'>  <span class="p">-</span> <span class="n">i</span><span class="o">++;</span>
</span><span class='line'><span class="nt">button</span><span class="nc">.btn.like</span>(<span class="na">type=</span><span class="s">&quot;button&quot;</span><span class="err">,</span> <span class="na">id=</span><span class="s">&quot;like_#{article.id}&quot;</span>)
</span><span class='line'>  <span class="nt">i</span><span class="nc">.icon-thumbs-up</span>
</span><span class='line'>  | Like
</span><span class='line'><span class="p">-</span> <span class="n">each</span> <span class="n">comment</span> <span class="n">in</span> <span class="n">article</span><span class="o">.</span><span class="n">comments</span>
</span><span class='line'>  <span class="p">-</span> <span class="n">j</span><span class="o">++;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3>4. Posting data to mongodb</h3>

<p>In order for the app to be useful there has to be some way for users to like and comment on articles.  Here is an example of an express route for commenting on an article.
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>comment on an article express route  - comment.js </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">post</span><span class="p">(</span><span class="s1">&#39;/comment&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">){</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="k">if</span> <span class="p">(</span><span class="nx">req</span><span class="p">.</span><span class="nx">user</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">models</span><span class="p">.</span><span class="nx">users</span><span class="p">.</span><span class="nx">findOne</span><span class="p">({</span><span class="nx">name</span><span class="o">:</span> <span class="nx">req</span><span class="p">.</span><span class="nx">user</span><span class="p">.</span><span class="nx">username</span><span class="p">},</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">userdata</span><span class="p">){</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">picture</span> <span class="o">=</span> <span class="nx">userdata</span><span class="p">.</span><span class="nx">photo</span><span class="p">;</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">now</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Date</span><span class="p">();</span>
</span><span class='line'>    <span class="nx">blog_id</span> <span class="o">=</span> <span class="nx">req</span><span class="p">.</span><span class="nx">param</span><span class="p">(</span><span class="s1">&#39;blog_id&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">models</span><span class="p">.</span><span class="nx">posts</span><span class="p">.</span><span class="nx">findById</span><span class="p">(</span><span class="nx">blog_id</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">blog</span><span class="p">){</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="k">return</span> <span class="nx">handleError</span><span class="p">(</span><span class="nx">err</span><span class="p">);</span>
</span><span class='line'>      <span class="nx">blog</span><span class="p">.</span><span class="nx">comments</span><span class="p">.</span><span class="nx">push</span><span class="p">({</span><span class="nx">user</span><span class="o">:</span> <span class="nx">req</span><span class="p">.</span><span class="nx">user</span><span class="p">.</span><span class="nx">username</span><span class="p">,</span> <span class="nx">user_photo</span><span class="o">:</span> <span class="nx">picture</span><span class="p">,</span> <span class="nx">body</span><span class="o">:</span> <span class="nx">req</span><span class="p">.</span><span class="nx">param</span><span class="p">(</span><span class="s1">&#39;comment&#39;</span><span class="p">),</span> <span class="nx">date_commented</span><span class="o">:</span> <span class="nx">now</span><span class="p">});</span>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">doc</span> <span class="o">=</span> <span class="nx">blog</span><span class="p">.</span><span class="nx">comments</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
</span><span class='line'>      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">doc</span><span class="p">);</span>
</span><span class='line'>      <span class="nx">blog</span><span class="p">.</span><span class="nx">save</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;error check&#39;</span><span class="p">);</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span> <span class="k">throw</span> <span class="nx">err</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;saved&#39;</span><span class="p">);</span>
</span><span class='line'>        <span class="nx">res</span><span class="p">.</span><span class="nx">redirect</span><span class="p">(</span><span class="s1">&#39;/blog/&#39;</span><span class="o">+</span><span class="nx">blog_id</span><span class="p">);</span>
</span><span class='line'>      <span class="p">});</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="p">});</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>If you see an area where the code can be improved let me know.  I'd like to incorporate all of this into a framework at some point.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[mashrd]]></title>
    <link href="http://abemassry.com/blog/2012/10/23/mashrd/"/>
    <updated>2012-10-23T14:53:00-04:00</updated>
    <id>http://abemassry.com/blog/2012/10/23/mashrd</id>
    <content type="html"><![CDATA[<h1>mashrd - Real-time News with Node.js and socket.io</h1>

<p>TL;DR version: I made a new site called <a href="http://mashrd.com">mashrd</a>, check it out and let me know what you think.</p>

<p>I wanted to try out node.js and socket.io but I wasn't sure what kind of webapp I wanted to build with the technology.  I usually try to build something that isn't out there yet and something that hasn't been done before, at least to my knowledge.  So I've had this idea for a while about a news twitter mashup where the site was organized like reddit or the old digg but using tweets instead.  After looking at some of the data I was getting I decided to include facebook likes and google plus shares.</p>

<p>The first issue was learning node.js for that I went through all of Pedro Teixeira's <a href="http://http://nodetuts.com/">Node Tuts</a> videos.  They were very informative and while some of the code that he was using has changed based on the new versions of the software, it really helped because of his choice in exercises.  He showed many parts of the ecosystem for node.js and when the code had changed you could either look in the comments on the same page or, some quick googling could find the right answer.</p>

<h3>Real-time News</h3>

<p>After getting the real-time aspect of the site working from a websockets point of view I needed some actual news on the site.  This could be done by manually submitting but it would require a massive army of submitters.  I used feeds from various news sites most of which I read and some that I found out about by making this site.  I also tried to keep the listing of sites level from all sides, while people on the news fringes will still find something interesting to read.  If you have a site that you think should be included, send me an email or a tweet.</p>

<h3>app.net</h3>

<p>I really wanted to include app.net but I could not find an app.net button.  When app.net gets a button (or I find it) I would like to make a site like this one specifically for app.net because I like the mission and it deserves its own webapp.</p>

<h3>Feedback</h3>

<p>Try it out and let me know what you think.  I'll scour these comments obsessively to get feedback and try to change anything I see.  Thanks for taking a look.</p>

<p><a href="http://mashrd.com">mashrd - Real-time News Now</a></p>
]]></content>
  </entry>
  
</feed>
