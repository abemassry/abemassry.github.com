<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: nosql | Abe Massry]]></title>
  <link href="http://abemassry.com/blog/categories/nosql/atom.xml" rel="self"/>
  <link href="http://abemassry.com/"/>
  <updated>2013-07-29T17:06:49-04:00</updated>
  <id>http://abemassry.com/</id>
  <author>
    <name><![CDATA[Abe Massry]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Creating and Displaying subdocs and Nested Data with mongodb and nodejs]]></title>
    <link href="http://abemassry.com/blog/2012/12/18/creating-and-displaying-subdocs-and-nested-data-with-mongodb-and-nodejs/"/>
    <updated>2012-12-18T13:27:00-05:00</updated>
    <id>http://abemassry.com/blog/2012/12/18/creating-and-displaying-subdocs-and-nested-data-with-mongodb-and-nodejs</id>
    <content type="html"><![CDATA[<p>If I was using MySQL and creating tables for a relational database I have a couple of ways to show comments and likes for an article on a blog for example.  The first way is to select my post from a table and then based on that ID of the post select my comments and likes for that post.  If I have properly normalized my tables this works well.  The problem with this is requires extra processing in my application code.  The next way is to use a join and write MySQL code to join the tables where there is a match and output the results.  This is ok but it requires more MySQL processing.</p>

<p>The question becomes how to do this in mongodb, a document oriented database without tables.  This turns out to be simpler to do and understand than the MySQL equivalent.</p>

<h3>1. Set up your document Schema</h3>

<p>For this code I'm using Node.js and mongoose to talk to mongodb, and jade to display.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Set Up Schema - schema.js </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'>  <span class="kd">var</span> <span class="nx">Likes</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Schema</span><span class="p">({</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="nx">like_id</span><span class="o">:</span> <span class="nx">ObjectId</span><span class="p">,</span>
</span><span class='line'><span class="nx">name</span><span class="o">:</span> <span class="nb">String</span><span class="p">,</span>
</span><span class='line'><span class="nx">date_liked</span><span class="o">:</span> <span class="nb">Date</span><span class="p">,</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="p">});</span>
</span><span class='line'>  <span class="nx">exports</span><span class="p">.</span><span class="nx">Likes</span> <span class="o">=</span> <span class="nx">mongoose</span><span class="p">.</span><span class="nx">model</span><span class="p">(</span><span class="s1">&#39;Likes&#39;</span><span class="p">,</span> <span class="nx">Likes</span><span class="p">);</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="kd">var</span> <span class="nx">Comments</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Schema</span><span class="p">({</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="nx">comment_id</span><span class="o">:</span> <span class="nx">ObjectId</span><span class="p">,</span>
</span><span class='line'><span class="nx">user</span><span class="o">:</span> <span class="nb">String</span><span class="p">,</span>
</span><span class='line'><span class="nx">user_photo</span><span class="o">:</span> <span class="nb">String</span><span class="p">,</span>
</span><span class='line'><span class="nx">body</span><span class="o">:</span> <span class="nb">String</span><span class="p">,</span>
</span><span class='line'><span class="nx">date_commented</span><span class="o">:</span> <span class="nb">Date</span><span class="p">,</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="p">});</span>
</span><span class='line'>  <span class="nx">exports</span><span class="p">.</span><span class="nx">Comments</span> <span class="o">=</span> <span class="nx">mongoose</span><span class="p">.</span><span class="nx">model</span><span class="p">(</span><span class="s1">&#39;Comments&#39;</span><span class="p">,</span> <span class="nx">Comments</span><span class="p">);</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="kd">var</span> <span class="nx">schema</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Schema</span><span class="p">({</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="nx">blog_id</span><span class="o">:</span> <span class="nx">ObjectId</span><span class="p">,</span>
</span><span class='line'><span class="nx">body</span><span class="o">:</span> <span class="nb">String</span><span class="p">,</span>
</span><span class='line'><span class="nx">lang</span><span class="o">:</span> <span class="nb">String</span><span class="p">,</span>
</span><span class='line'><span class="nx">title</span><span class="o">:</span> <span class="nb">String</span><span class="p">,</span>
</span><span class='line'><span class="nx">date</span><span class="o">:</span> <span class="nb">Date</span><span class="p">,</span>
</span><span class='line'><span class="nx">submitted_by</span><span class="o">:</span> <span class="nb">String</span><span class="p">,</span>
</span><span class='line'><span class="nx">submitted_by_photo</span><span class="o">:</span> <span class="nb">String</span><span class="p">,</span>
</span><span class='line'><span class="nx">likes</span><span class="o">:</span> <span class="p">[</span><span class="nx">Likes</span><span class="p">],</span>
</span><span class='line'><span class="nx">comments</span><span class="o">:</span> <span class="p">[</span><span class="nx">Comments</span><span class="p">]</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="p">});</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The main schema is the "var schema" this is the blog post.  The blog post contains likes and comments, of each there will be many.  Those are stored in objects and there can be multiple objects in each of the likes and comments.  The advantage of this is that you can make one database call and get all the information about a post at once, so you need less application to database communication.  And it is also easier to understand when you think about this.  For example you can add a tag schema store in another object and it can have an arbitrary number of tags.</p>

<h3>2. Reading nested Data out from mongodb</h3>

<p>Here I'm using an express app to read the data out and send it to a jade file for displaying.
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Reading data from mongodb in nodejs using mongoose  - read.js </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;/blog/:id&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">){</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="k">if</span> <span class="p">(</span><span class="nx">req</span><span class="p">.</span><span class="nx">user</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">username</span> <span class="o">=</span> <span class="nx">req</span><span class="p">.</span><span class="nx">user</span><span class="p">.</span><span class="nx">username</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="c1">//get the example</span>
</span><span class='line'><span class="nx">models</span><span class="p">.</span><span class="nx">posts</span><span class="p">.</span><span class="nx">findById</span><span class="p">(</span><span class="nx">req</span><span class="p">.</span><span class="nx">params</span><span class="p">.</span><span class="nx">id</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">data</span><span class="p">){</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">models</span><span class="p">.</span><span class="nx">users</span><span class="p">.</span><span class="nx">findOne</span><span class="p">({</span><span class="nx">name</span><span class="o">:</span> <span class="nx">username</span><span class="p">},</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">userdata</span><span class="p">){</span>
</span><span class='line'>     <span class="c1">//render the view page</span>
</span><span class='line'>     <span class="nx">res</span><span class="p">.</span><span class="nx">render</span><span class="p">(</span><span class="s1">&#39;blog.jade&#39;</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>         <span class="nx">locals</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>           <span class="nx">title</span><span class="o">:</span> <span class="nx">data</span><span class="p">.</span><span class="nx">title</span><span class="p">,</span>
</span><span class='line'>           <span class="nx">page</span><span class="o">:</span> <span class="s1">&#39;&#39;</span><span class="p">,</span>
</span><span class='line'>           <span class="nx">article</span><span class="o">:</span> <span class="nx">data</span><span class="p">,</span>
</span><span class='line'>           <span class="nx">user</span><span class="o">:</span> <span class="nx">username</span><span class="p">,</span>
</span><span class='line'>           <span class="nx">userdata</span><span class="o">:</span> <span class="nx">userdata</span>
</span><span class='line'>         <span class="p">}</span>
</span><span class='line'>     <span class="p">});</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">res</span><span class="p">.</span><span class="nx">redirect</span><span class="p">(</span><span class="s1">&#39;/404&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="p">});</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>There are no differences here reading from a mongodb doc that has nested data vs non nested data.</p>

<h3>3. Output the data in jade.</h3>

<p>There are two each loops that run through the nested data.  If there are multiple nested data on a page, like the main page of the blog, then you can loop through the blog articles and then have a sub loop for each of the comment sections.
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Displaying nested data in jade  - blog.jade </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='jade'><span class='line'><span class="p">-</span> <span class="n">each</span> <span class="n">like</span> <span class="n">in</span> <span class="n">article</span><span class="o">.</span><span class="n">likes</span>
</span><span class='line'>  <span class="p">-</span> <span class="n">i</span><span class="o">++;</span>
</span><span class='line'><span class="nt">button</span><span class="nc">.btn.like</span>(<span class="na">type=</span><span class="s">&quot;button&quot;</span><span class="err">,</span> <span class="na">id=</span><span class="s">&quot;like_#{article.id}&quot;</span>)
</span><span class='line'>  <span class="nt">i</span><span class="nc">.icon-thumbs-up</span>
</span><span class='line'>  | Like
</span><span class='line'><span class="p">-</span> <span class="n">each</span> <span class="n">comment</span> <span class="n">in</span> <span class="n">article</span><span class="o">.</span><span class="n">comments</span>
</span><span class='line'>  <span class="p">-</span> <span class="n">j</span><span class="o">++;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3>4. Posting data to mongodb</h3>

<p>In order for the app to be useful there has to be some way for users to like and comment on articles.  Here is an example of an express route for commenting on an article.
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>comment on an article express route  - comment.js </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">post</span><span class="p">(</span><span class="s1">&#39;/comment&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">){</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="k">if</span> <span class="p">(</span><span class="nx">req</span><span class="p">.</span><span class="nx">user</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">models</span><span class="p">.</span><span class="nx">users</span><span class="p">.</span><span class="nx">findOne</span><span class="p">({</span><span class="nx">name</span><span class="o">:</span> <span class="nx">req</span><span class="p">.</span><span class="nx">user</span><span class="p">.</span><span class="nx">username</span><span class="p">},</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">userdata</span><span class="p">){</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">picture</span> <span class="o">=</span> <span class="nx">userdata</span><span class="p">.</span><span class="nx">photo</span><span class="p">;</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">now</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Date</span><span class="p">();</span>
</span><span class='line'>    <span class="nx">blog_id</span> <span class="o">=</span> <span class="nx">req</span><span class="p">.</span><span class="nx">param</span><span class="p">(</span><span class="s1">&#39;blog_id&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">models</span><span class="p">.</span><span class="nx">posts</span><span class="p">.</span><span class="nx">findById</span><span class="p">(</span><span class="nx">blog_id</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">blog</span><span class="p">){</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="k">return</span> <span class="nx">handleError</span><span class="p">(</span><span class="nx">err</span><span class="p">);</span>
</span><span class='line'>      <span class="nx">blog</span><span class="p">.</span><span class="nx">comments</span><span class="p">.</span><span class="nx">push</span><span class="p">({</span><span class="nx">user</span><span class="o">:</span> <span class="nx">req</span><span class="p">.</span><span class="nx">user</span><span class="p">.</span><span class="nx">username</span><span class="p">,</span> <span class="nx">user_photo</span><span class="o">:</span> <span class="nx">picture</span><span class="p">,</span> <span class="nx">body</span><span class="o">:</span> <span class="nx">req</span><span class="p">.</span><span class="nx">param</span><span class="p">(</span><span class="s1">&#39;comment&#39;</span><span class="p">),</span> <span class="nx">date_commented</span><span class="o">:</span> <span class="nx">now</span><span class="p">});</span>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">doc</span> <span class="o">=</span> <span class="nx">blog</span><span class="p">.</span><span class="nx">comments</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
</span><span class='line'>      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">doc</span><span class="p">);</span>
</span><span class='line'>      <span class="nx">blog</span><span class="p">.</span><span class="nx">save</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;error check&#39;</span><span class="p">);</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span> <span class="k">throw</span> <span class="nx">err</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;saved&#39;</span><span class="p">);</span>
</span><span class='line'>        <span class="nx">res</span><span class="p">.</span><span class="nx">redirect</span><span class="p">(</span><span class="s1">&#39;/blog/&#39;</span><span class="o">+</span><span class="nx">blog_id</span><span class="p">);</span>
</span><span class='line'>      <span class="p">});</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="p">});</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>If you see an area where the code can be improved let me know.  I'd like to incorporate all of this into a framework at some point.</p>
]]></content>
  </entry>
  
</feed>
