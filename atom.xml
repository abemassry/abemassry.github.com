<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Abe Massry]]></title>
  <link href="http://abemassry.com/atom.xml" rel="self"/>
  <link href="http://abemassry.com/"/>
  <updated>2014-02-25T15:24:16-05:00</updated>
  <id>http://abemassry.com/</id>
  <author>
    <name><![CDATA[Abe Massry]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Building wsend - A Command Line Tool to Easily Send Files]]></title>
    <link href="http://abemassry.com/blog/2014/02/14/building-wsend/"/>
    <updated>2014-02-14T12:11:00-05:00</updated>
    <id>http://abemassry.com/blog/2014/02/14/building-wsend</id>
    <content type="html"><![CDATA[<p>Building wsend - A Command Line Tool to Easily Send Files. I wanted to write a post about the technical aspect of building wsend, after <a href="https://twitter.com/jonmarkgo">Jon Gottfried</a> suggested I write one. Thanks Jon</p>

<h2>Motivation</h2>

<p>As any technical project I undertake, I like to explain the motivation behind the project.  What is the end state of the project? What is the final product supposed to look like? Most of the time I have an answer to these questions before I start.  With wsend the answer was clear, a command line program that gave you a URL for a file up to 10GB in size. It should be simple to install and quick to use and not require any type of complicated setup.  There are other command line tools for sending files but they either require me to put in additional information about where I am sending the file like scp, or I have to set this sort of thing up before I start.  So I had this idea in mind to scratch my own itch and hopefully you find it useful too. (More motivation also came from: <a href="http://xkcd.com/949/">http://xkcd.com/949/</a>).</p>

<p><a href="http://xkcd.com/949/"><img src="https://wsend.net/85a497041dfd921da6d5fca49ccc3caf/file_transfer.png"></a></p>

<h2>Server Side</h2>

<p>Any time I&#8217;m working on a service that uploads a file, I like to start out on the back end.  The reason for this is because we have straightforward tools for sending files like HTML upload forms and curl; but many tools for accepting an upload on the server.</p>

<p>My first attempt for a different website was to use PHP.</p>

<ul>
<li>I had found that PHP ran into a 2GB file upload limit, even when running on a 64bit machine.</li>
<li>So my next option was Perl and nginx.</li>
<li>Perl could handle a large file and so could nginx, but in order to link the two together I needed FastCGI.</li>
<li>I ran into a similar 2GB file upload limit with FastCGI.</li>
<li>So the next option was node.js</li>
</ul>


<p>I was able to upload a file up to 10GB and it worked using node.  This worked out really well because the application is the server, there&#8217;s no layer in between.</p>

<p>The rest of the backend is a standard <a href="http://expressjs.com/">express</a> app that exposes a simple <a href="https://github.com/abemassry/wsend#api">API</a> using POST for all communication.  And all this can be set up using curl on the client side for testing.</p>

<p>And here is an example of the express route used to handle the upload.</p>

<figure class='code'><figcaption><span>Express Upload Example</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// upload file from command line</span>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">post</span><span class="p">(</span><span class="s1">&#39;/upload_cli&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">userID</span> <span class="o">=</span> <span class="nx">req</span><span class="p">.</span><span class="nx">param</span><span class="p">(</span><span class="s1">&#39;uid&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">now</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Date</span><span class="p">();</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nx">userID</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">models</span><span class="p">.</span><span class="nx">users</span><span class="p">.</span><span class="nx">findOne</span><span class="p">({</span><span class="nx">user_id</span><span class="o">:</span> <span class="nx">userID</span><span class="p">},</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">doc</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="k">throw</span> <span class="nx">err</span><span class="p">;</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="nx">doc</span><span class="p">.</span><span class="nx">user_id</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">filesize</span> <span class="o">=</span> <span class="nx">req</span><span class="p">.</span><span class="nx">files</span><span class="p">.</span><span class="nx">filehandle</span><span class="p">.</span><span class="nx">size</span><span class="p">;</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">filesizeInt</span> <span class="o">=</span> <span class="nb">parseInt</span><span class="p">(</span><span class="nx">filesize</span><span class="p">);</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">filename</span><span class="o">=</span><span class="nx">req</span><span class="p">.</span><span class="nx">files</span><span class="p">.</span><span class="nx">filehandle</span><span class="p">.</span><span class="nx">name</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// newpath needs a unique folder,</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">uniqueDir</span> <span class="o">=</span> <span class="nx">getUniqueDir</span><span class="p">();</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">newDir</span> <span class="o">=</span> <span class="nx">__dirname</span> <span class="o">+</span> <span class="s2">&quot;/uploads&quot;</span><span class="o">+</span><span class="s1">&#39;/&#39;</span><span class="o">+</span> <span class="nx">uniqueDir</span> <span class="o">+</span> <span class="s1">&#39;/&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="nx">fs</span><span class="p">.</span><span class="nx">mkdir</span><span class="p">(</span><span class="nx">newDir</span><span class="p">,</span> <span class="mi">0744</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="k">if</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span> <span class="k">throw</span> <span class="nx">err</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>          <span class="kd">var</span> <span class="nx">newPath</span> <span class="o">=</span> <span class="nx">__dirname</span> <span class="o">+</span> <span class="s2">&quot;/uploads&quot;</span><span class="o">+</span><span class="s1">&#39;/&#39;</span><span class="o">+</span> <span class="nx">uniqueDir</span> <span class="o">+</span> <span class="s1">&#39;/&#39;</span> <span class="o">+</span><span class="nx">filename</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>          <span class="c1">//add a check to make sure newpath is writable</span>
</span><span class='line'>          <span class="nx">fs</span><span class="p">.</span><span class="nx">rename</span><span class="p">(</span><span class="nx">req</span><span class="p">.</span><span class="nx">files</span><span class="p">.</span><span class="nx">filehandle</span><span class="p">.</span><span class="nx">path</span><span class="p">,</span> <span class="nx">newPath</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="k">throw</span> <span class="nx">err</span><span class="p">;</span>
</span><span class='line'>            <span class="kd">var</span> <span class="nx">permalink</span> <span class="o">=</span> <span class="s2">&quot;https://wsend.net/&quot;</span><span class="o">+</span> <span class="nx">uniqueDir</span> <span class="o">+</span> <span class="s1">&#39;/&#39;</span> <span class="o">+</span> <span class="nx">filename</span><span class="p">;</span>
</span><span class='line'>            <span class="nx">doc</span><span class="p">.</span><span class="nx">files</span><span class="p">.</span><span class="nx">push</span><span class="p">({</span><span class="nx">timestamp</span><span class="o">:</span> <span class="nx">now</span><span class="p">,</span>
</span><span class='line'>                            <span class="nx">filename</span><span class="o">:</span> <span class="nx">filename</span><span class="p">,</span>
</span><span class='line'>                            <span class="nx">type</span><span class="o">:</span> <span class="s1">&#39;&#39;</span><span class="p">,</span>
</span><span class='line'>                            <span class="nx">size</span><span class="o">:</span> <span class="nx">filesizeInt</span><span class="p">,</span>
</span><span class='line'>                            <span class="nx">dir</span><span class="o">:</span> <span class="nx">newPath</span><span class="p">,</span>
</span><span class='line'>                            <span class="nx">permalink</span><span class="o">:</span> <span class="nx">permalink</span><span class="p">,</span>
</span><span class='line'>                            <span class="nx">permissions</span><span class="o">:</span> <span class="s1">&#39;&#39;</span>
</span><span class='line'>                          <span class="p">});</span>
</span><span class='line'>            <span class="c1">// save file location to db</span>
</span><span class='line'>            <span class="nx">doc</span><span class="p">.</span><span class="nx">save</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>              <span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="k">throw</span> <span class="nx">err</span><span class="p">;</span>
</span><span class='line'>            <span class="p">});</span>
</span><span class='line'>            <span class="c1">// send permalink as response</span>
</span><span class='line'>            <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="nx">permalink</span><span class="p">);</span>
</span><span class='line'>          <span class="p">});</span>
</span><span class='line'>        <span class="p">});</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Express makes it really easy to handle the file upload. The properties of the file are stored in <code>req.files.filehandle</code> and you save the file to the file system with <code>fs.rename</code> which comes from the fs module of nodejs and you get it with a <code>var fs = require('fs');</code>.</p>

<p>The files are stored on the same server as everything else, while this is not optimal and a service like <a href="https://aws.amazon.com/s3/">S3</a> or a private fileserver should be used, this is small scale right now and when the usage grows an alternative file storage system can be explored.  All transfers happen using https and you can encrypt your file before it leaves your computer with a handy script called <a href="https://github.com/abemassry/wsend-gpg">wsend-gpg</a> which I describe later.</p>

<h2>Client Side</h2>

<p>Now that we have a server setup with an API that accepts uploads and gives you a URL for a file we can do a lot of fun things on the client.  So the first thing to do was write a command line script to handle all of these API calls using curl.</p>

<p>Which language to chose for a command line script?</p>

<ul>
<li>Perl is widely deployed on most Unix / Linux / Mac systems.</li>
<li>In order to install a progress bar CPAN was needed.</li>
<li>CPAN has to be set up on the client&#8217;s machine</li>
<li>Bash is the default shell on many Unix installations</li>
<li>Bash is a scripting language.</li>
<li>cURL has its own built in progress bar.</li>
<li>Use bash and curl.</li>
</ul>


<p>So I started working on the <a href="https://github.com/abemassry/wsend">CLI</a>.  After all the setup that the script does automatically it comes down to one command.</p>

<figure class='code'><figcaption><span>wsend command</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>wsend file.txt
</span></code></pre></td></tr></table></div></figure>


<p>And it returns you a URL.</p>

<p>Here is the function inside the script that sets everything up and actually sends the file.</p>

<figure class='code'><figcaption><span>wsend upload function</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sendFile<span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="o">[[</span> -e <span class="s2">&quot;$fileOrDirToSend&quot;</span> <span class="o">]]</span>; <span class="k">then</span>
</span><span class='line'><span class="k">    if</span> <span class="o">[</span> -d <span class="s2">&quot;$fileOrDirToSend&quot;</span> <span class="o">]</span>; <span class="k">then</span>
</span><span class='line'>      <span class="c">#we want to send a directory, so make a compressed archive</span>
</span><span class='line'>      <span class="nv">fileOrDirToSend</span><span class="o">=</span><span class="k">${</span><span class="nv">fileOrDirToSend</span><span class="p">%/</span><span class="k">}</span>
</span><span class='line'>      tar cfj <span class="s2">&quot;$fileOrDirToSend.tar.bz2&quot;</span> <span class="s2">&quot;$fileOrDirToSend&quot;</span>
</span><span class='line'>      <span class="nv">fileToSend</span><span class="o">=</span><span class="s2">&quot;$fileOrDirToSend.tar.bz2&quot;</span>
</span><span class='line'>    <span class="k">elif</span> <span class="o">[</span> -e <span class="s2">&quot;$fileOrDirToSend&quot;</span> <span class="o">]</span>; <span class="k">then</span>
</span><span class='line'><span class="k">      </span><span class="nv">fileToSend</span><span class="o">=</span><span class="nv">$fileOrDirToSend</span>
</span><span class='line'>    <span class="k">fi</span>
</span><span class='line'>
</span><span class='line'><span class="k">    if</span> <span class="o">[</span> <span class="s2">&quot;$clientOS&quot;</span> <span class="o">==</span> <span class="s2">&quot;Darwin&quot;</span> <span class="o">]</span>; <span class="k">then</span>
</span><span class='line'><span class="k">      </span><span class="nv">fileToSendSize</span><span class="o">=</span><span class="k">$(</span>stat -f %z <span class="s2">&quot;$fileToSend&quot;</span><span class="k">)</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'><span class="k">      </span><span class="nv">fileToSendSize</span><span class="o">=</span><span class="k">$(</span>stat -c%s <span class="s2">&quot;$fileToSend&quot;</span><span class="k">)</span>
</span><span class='line'>    <span class="k">fi</span>
</span><span class='line'>
</span><span class='line'><span class="k">    </span>getAccountSpace
</span><span class='line'>    <span class="k">if</span> <span class="o">[</span> <span class="s2">&quot;$accountSizeAvailable&quot;</span> <span class="o">==</span> <span class="s2">&quot;not enough space in your account for this transfer&quot;</span> <span class="o">]</span>; <span class="k">then</span>
</span><span class='line'><span class="k">      </span>notEnoughSpaceErr
</span><span class='line'>    <span class="k">elif</span> <span class="o">[</span> <span class="s2">&quot;$accountSizeAvailable&quot;</span> <span class="o">==</span> <span class="s2">&quot;file is too big for your account size&quot;</span> <span class="o">]</span>; <span class="k">then</span>
</span><span class='line'><span class="k">      </span>filesizeTooLarge
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'><span class="k">      if</span> <span class="o">[[</span> <span class="nv">$link</span> <span class="o">]]</span>; <span class="k">then</span>
</span><span class='line'>        <span class="c">#link was provided, so update target link with file</span>
</span><span class='line'>        <span class="nv">curlReturn</span><span class="o">=</span><span class="k">$(</span>curl -F <span class="s2">&quot;uid=$id&quot;</span> -F <span class="s2">&quot;link=$link&quot;</span> -F <span class="s2">&quot;filehandle=@$fileToSend&quot;</span> <span class="nv">$host</span>/update_cli<span class="k">)</span>
</span><span class='line'>      <span class="k">else</span>
</span><span class='line'>        <span class="c">#simply create a new one</span>
</span><span class='line'>        <span class="nv">curlReturn</span><span class="o">=</span><span class="k">$(</span>curl -F <span class="s2">&quot;uid=$id&quot;</span> -F <span class="s2">&quot;filehandle=@$fileToSend&quot;</span> <span class="nv">$host</span>/upload_cli<span class="k">)</span>
</span><span class='line'>        <span class="nb">echo</span> <span class="s2">&quot;$curlReturn|$(make_absolute &quot;</span><span class="nv">$fileOrDirToSend</span><span class="s2">&quot;)&quot;</span> &gt;&gt; <span class="s2">&quot;$wsend_base/.list&quot;</span>
</span><span class='line'>      <span class="k">fi</span>
</span><span class='line'><span class="k">      </span><span class="nb">echo</span> <span class="nv">$curlReturn</span>
</span><span class='line'>    <span class="k">fi</span>
</span><span class='line'>
</span><span class='line'><span class="k">    if</span> <span class="o">[</span> -d <span class="s2">&quot;$fileOrDirToSend&quot;</span> <span class="o">]</span>; <span class="k">then</span>
</span><span class='line'>      <span class="c">#remove our temporary file</span>
</span><span class='line'>      rm <span class="s2">&quot;$fileToSend&quot;</span>
</span><span class='line'>    <span class="k">fi</span>
</span><span class='line'><span class="k">  elif</span> <span class="o">[</span> <span class="s2">&quot;$fileSendBool&quot;</span> <span class="o">==</span> <span class="s2">&quot;true&quot;</span> <span class="o">]</span>; <span class="k">then</span>
</span><span class='line'>    <span class="c">#want to send file, but source doesn&#39;t exist</span>
</span><span class='line'>    <span class="nv">echoUsage</span><span class="o">=</span><span class="s2">&quot;true&quot;</span>
</span><span class='line'>  <span class="k">fi</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Inside the script this is the main command that actually sends your file.</p>

<figure class='code'><figcaption><span>curl the file</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>curl -F <span class="s2">&quot;uid=$id&quot;</span> -F <span class="s2">&quot;filehandle=@$fileToSend&quot;</span> <span class="nv">$host</span>/upload_cli
</span></code></pre></td></tr></table></div></figure>


<p>Where <code>$host</code> is <code>https://wsend.net</code>.  The return of that command is your URL. Its really simple, but sometimes simple works out the best.</p>

<h2>Other Client Possibilities</h2>

<p>Now that we have an API and a command line utility we can do some interesting stuff:</p>

<ul>
<li>We can write a script to auto upload an image and get a link that shows up as a <a href="http://abemassry.com/blog/2013/09/09/wsend-twitter-card/">Twitter Card</a>.</li>
<li>We can write a program to provide <a href="https://github.com/abemassry/wsend-gpg">end to end encryption</a></li>
<li>We can write a new <a href="https://github.com/abemassry/node-wsend">client</a> in nodejs as well.</li>
<li>We can make a <a href="https://wsend.net/upload">Drag and Drop GUI</a> website interface.</li>
<li>We can upload an html file and have it render in the browser, even a <a href="https://wsend.net/014c82d83470b9c45efc6fdaddb00109/">slideshow</a> using <a href="http://lab.hakim.se/reveal-js/#/">reveal.js</a>.</li>
<li>Even a <a href="https://github.com/abemassry/wsend-static">static site generator</a> (still under development [in pre-alpha] though)</li>
</ul>


<p>Future projects like these could include:</p>

<ul>
<li>Writing clients in Ruby, Python, Perl, C &#8230;</li>
<li>Distributing with rubygems, pip, CPAN, apt, yum, pacman &#8230;</li>
<li>Or anything else you can thing of and do.</li>
</ul>


<h2>Outcome</h2>

<p>It&#8217;s been a really good learning experience and it has been my first opportunity to work with others in open source on my projects, usually I&#8217;m a contributor to someone else&#8217;s project but when people are submitting me code to review and incorporate into my open source project I really get a feeling that the community is working together as a whole.  Its really amazing that people believe in my ideas and like them enough to contribute and I&#8217;m really grateful for the help.  It was really exciting to get my first pull request and I hope to work with others on this in the future.</p>

<p>Thanks Jon, for encouraging me to write this post.</p>

<p>Check out the site at <a href="https://wsend.net">https://wsend.net</a></p>

<p>Follow me on twitter <a href="https://twitter.com/abemassry">@abemassry</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[5 Things I use for Productivity]]></title>
    <link href="http://abemassry.com/blog/2013/10/15/5-things-i-use-for-productivity/"/>
    <updated>2013-10-15T13:29:00-04:00</updated>
    <id>http://abemassry.com/blog/2013/10/15/5-things-i-use-for-productivity</id>
    <content type="html"><![CDATA[<p>Before I consciously thought about productivity I had an organically grown method and wide range of tools I used that wasn’t necessarily the most productive way of being productive.  Then I stepped back and looked at what worked the best and what didn’t.</p>

<h2>First the history:</h2>

<p>In highschool and college we had planners issued to us once a year.  Everything I did went into them, and I stayed productive and was on top of things because I checked the planner relentlessly, I always carried it with me because I carried a backpack everywhere I went.</p>

<p>When I started working I bought a pocket sized planner but it was too small and it could fit easily in a jacket pocket but not carry it with me.</p>

<p>Then came the smart phones, first it was email and calendaring, this was good but not the best. It was difficult to check and the phone didn’t have everything plainly listed, you had to search for what you had to do that day.  One positive was, now there were automated reminders and alarms that went off when a meeting was coming up.</p>

<p>These tools were difficult to use but you could use them properly to get by.</p>

<h2>What I use now:</h2>

<p>I’ll list these in reverse order from now as I have just started using the newer tools and they are more at the forefront of my mind because they haven’t made it into my unthinking routine.</p>

<ol>
<li><p><a href="http://www.bulletjournal.com/">Bullet Journal</a></p>

<p> I saw this just recently and I realized I was the most productive when I had one true source, in a handwritten book, that I referred to.  I jumped in headfirst and said “This is what I’ll be using from now on”.  It make sense to me and the other parts of the planner that were printed on the page, I draw them in.  The only problem in my usage of this is I’m not always able to carry something with me, as it needs to fit in my pocket which is why I also use:</p></li>
<li><p><a href="https://evernote.com/">Evernote</a></p>

<p> I use it as a backup to bullet journal when I want to take a note to write it down later and I only have my phone with me, or I use it to take a picture of something that I want to remember.  It kinda serves the role of my own personal external memory. I used to use a point and shoot digital camera for this.</p></li>
<li><p><a href="https://lift.do/">Lift</a></p>

<p> I usually check this around 2 times a day.  As soon as I get up, and before I go to bed.  This reminds me of the things I have to do on a daily basis, but since I should be doing them every day, I wouldn’t write them down. I also use this to visually show progress on a long running goal.</p></li>
<li><p><a href="http://tempo.ai/">Tempo</a></p>

<p> I switched to tempo for my calendaring app and I really like the experience.  I can enter something on google calendar (which I use for desktop calendaring) and it will automatically show up and pull in relevant data to each meeting or appointment.</p></li>
<li><p>My Brain</p>

<p> All the others are some form of Tech (analog tech in the case of the bullet journal).  But in an ideal world I’d have a photographic memory, I would remember all the important things as well as the semi important things, and an internal chronometer that would alert me when the things in my calendar were coming up.</p>

<p> The reason why I use items 1-4 and why I think they are useful is that it frees my mind to focus on one task at a time and I can complete the task efficiently when I’m able to focus.  I actually forget an item temporarily when I write it down or put it in a calendar and either a machine reminds me I have something to do or I have a break in work and I wonder what it is I have to do and it’s written down.</p></li>
</ol>


<p>I’m Abe and I make a tool for being more productive on the command line and on the web for sending files.  Check out <a href="https://wsend.net">Wsend</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[NTFS on OSX 10.7]]></title>
    <link href="http://abemassry.com/blog/2013/10/01/ntfs-on-osx-10-dot-7/"/>
    <updated>2013-10-01T15:12:00-04:00</updated>
    <id>http://abemassry.com/blog/2013/10/01/ntfs-on-osx-10-dot-7</id>
    <content type="html"><![CDATA[<p>This is mostly a reminder to myself on how to get NTFS reading and writing on a mac working properly.  You might have some use for it if you run into this problem as I have today.  I&#8217;ll have to make another post once I update to 10.8 or 10.9.</p>

<h2>1. Download NTFS 3G</h2>

<p>First download and install this file: <a href="https://wsend.net/2772bf8b931ff9d4d7abef80cbfa62c6/ntfs-3g-2010.10.2-macosx.dmg">ntfs_3g</a>
Use the first option about it being the safest</p>

<h2>2. Download OSXFuse</h2>

<p>Next download and install this file: <a href="https://wsend.net/d55ad32711128d662e11be012b97508d/osxfuse-2.6.1.dmg">OSXFuse</a>
And choose the MacFuse compatibility layer</p>

<h2>3. Download the fuse wait patch</h2>

<p>Next download and install this file: <a href="https://wsend.net/450ada007eff051aff1ad4f7a5d39767/fuse_wait-1.1.pkg">fuse_wait</a>
I don&#8217;t think there should be any special options for this one but I might have forgotten about something, so let me know.</p>

<p>I haven&#8217;t included screenshots so there is some updating that can be done.  If you run into any problems discuss them in the comments, and I&#8217;ll try to take screenshots on the next machine I run across.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Wsend Twitter Card]]></title>
    <link href="http://abemassry.com/blog/2013/09/09/wsend-twitter-card/"/>
    <updated>2013-09-09T14:59:00-04:00</updated>
    <id>http://abemassry.com/blog/2013/09/09/wsend-twitter-card</id>
    <content type="html"><![CDATA[<p>If you upload an image using wsend and want to share it on twitter it doesn&#8217;t show up as a twitter card by default.  I wanted to have it render in the stream.</p>

<p>So I started the repo <a href="https://github.com/abemassry/wsend-twitter-card">wsend-twitter-card</a>. The script will take the image provided and create a link that will allow twitter to render a twitter card.</p>

<p>Here is the final product:</p>

<p><img src="https://wsend.net/4f63cc74b484923a64b72f1cf9b5b3b4/wtc.png"></p>

<p>This is just one example of an app that can be built on top of wsend.  In the future I hope to create more apps built on top and use the Unix philosophy of each program doing one thing and doing it well.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[New app: wsend - the opposite of wget]]></title>
    <link href="http://abemassry.com/blog/2013/07/29/new-app-wsend-the-opposite-of-wget/"/>
    <updated>2013-07-29T16:44:00-04:00</updated>
    <id>http://abemassry.com/blog/2013/07/29/new-app-wsend-the-opposite-of-wget</id>
    <content type="html"><![CDATA[<p>A quick post to let everyone know I just launched a new website with a cli interface.  I was looking for a quicker way to send files from the command line so I created wsend.  I based it off of wget because wget is very quick and easy to use if you want to download a file from the web to your current directory.  You can check it out at:</p>

<p><a href="https://wsend.net">wsend.net</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Working with multiple cores in Python]]></title>
    <link href="http://abemassry.com/blog/2013/07/15/working-with-multiple-cores-in-python/"/>
    <updated>2013-07-15T02:29:00-04:00</updated>
    <id>http://abemassry.com/blog/2013/07/15/working-with-multiple-cores-in-python</id>
    <content type="html"><![CDATA[<h2>Challenges</h2>

<p>I just created this new project called Crazip because I wanted to try to write a program using multiple cores in python.  Normally I would use threads for something like this because it would cut down on the need for interprocess communication. It turns out that using threads in python doesn&#8217;t allow the program to run on multiple cores with the default installation.  So there is the multiprocessing library to get the program to run on multiple cores simultaneously.  After this the program showed up on multiple cores when run and then the shared memory was tweaked to get the separate processes communicating.</p>

<h2>The Idea</h2>

<p>The idea is to take the hash of a file and then try to recreate the file with a known length of random ones and zeros.  This works very well for very small file sizes but the brute force method works terribly for large sized files.  The limit seems to be the number of random tries needed to achieve the reverse hash.  If one had access to a supercomputer with thousands of cores this might make sense.  Then again the question remains as to why you would need to compress something so heavily if you had access to that kind of hardware.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Creating and Displaying subdocs and Nested Data with mongodb and nodejs]]></title>
    <link href="http://abemassry.com/blog/2012/12/18/creating-and-displaying-subdocs-and-nested-data-with-mongodb-and-nodejs/"/>
    <updated>2012-12-18T13:27:00-05:00</updated>
    <id>http://abemassry.com/blog/2012/12/18/creating-and-displaying-subdocs-and-nested-data-with-mongodb-and-nodejs</id>
    <content type="html"><![CDATA[<p>If I was using MySQL and creating tables for a relational database I have a couple of ways to show comments and likes for an article on a blog for example.  The first way is to select my post from a table and then based on that ID of the post select my comments and likes for that post.  If I have properly normalized my tables this works well.  The problem with this is requires extra processing in my application code.  The next way is to use a join and write MySQL code to join the tables where there is a match and output the results.  This is ok but it requires more MySQL processing.</p>

<p>The question becomes how to do this in mongodb, a document oriented database without tables.  This turns out to be simpler to do and understand than the MySQL equivalent.</p>

<h3>1. Set up your document Schema</h3>

<p>For this code I&#8217;m using Node.js and mongoose to talk to mongodb, and jade to display.</p>

<figure class='code'><figcaption><span>Set Up Schema - schema.js </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'>  <span class="kd">var</span> <span class="nx">Likes</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Schema</span><span class="p">({</span>
</span><span class='line'>    <span class="nx">like_id</span><span class="o">:</span> <span class="nx">ObjectId</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">name</span><span class="o">:</span> <span class="nb">String</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">date_liked</span><span class="o">:</span> <span class="nb">Date</span><span class="p">,</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>  <span class="nx">exports</span><span class="p">.</span><span class="nx">Likes</span> <span class="o">=</span> <span class="nx">mongoose</span><span class="p">.</span><span class="nx">model</span><span class="p">(</span><span class="s1">&#39;Likes&#39;</span><span class="p">,</span> <span class="nx">Likes</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">Comments</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Schema</span><span class="p">({</span>
</span><span class='line'>    <span class="nx">comment_id</span><span class="o">:</span> <span class="nx">ObjectId</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">user</span><span class="o">:</span> <span class="nb">String</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">user_photo</span><span class="o">:</span> <span class="nb">String</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">body</span><span class="o">:</span> <span class="nb">String</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">date_commented</span><span class="o">:</span> <span class="nb">Date</span><span class="p">,</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>  <span class="nx">exports</span><span class="p">.</span><span class="nx">Comments</span> <span class="o">=</span> <span class="nx">mongoose</span><span class="p">.</span><span class="nx">model</span><span class="p">(</span><span class="s1">&#39;Comments&#39;</span><span class="p">,</span> <span class="nx">Comments</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">schema</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Schema</span><span class="p">({</span>
</span><span class='line'>    <span class="nx">blog_id</span><span class="o">:</span> <span class="nx">ObjectId</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">body</span><span class="o">:</span> <span class="nb">String</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">lang</span><span class="o">:</span> <span class="nb">String</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">title</span><span class="o">:</span> <span class="nb">String</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">date</span><span class="o">:</span> <span class="nb">Date</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">submitted_by</span><span class="o">:</span> <span class="nb">String</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">submitted_by_photo</span><span class="o">:</span> <span class="nb">String</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">likes</span><span class="o">:</span> <span class="p">[</span><span class="nx">Likes</span><span class="p">],</span>
</span><span class='line'>    <span class="nx">comments</span><span class="o">:</span> <span class="p">[</span><span class="nx">Comments</span><span class="p">]</span>
</span><span class='line'>  <span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>The main schema is the &#8220;var schema&#8221; this is the blog post.  The blog post contains likes and comments, of each there will be many.  Those are stored in objects and there can be multiple objects in each of the likes and comments.  The advantage of this is that you can make one database call and get all the information about a post at once, so you need less application to database communication.  And it is also easier to understand when you think about this.  For example you can add a tag schema store in another object and it can have an arbitrary number of tags.</p>

<h3>2. Reading nested Data out from mongodb</h3>

<p>Here I&#8217;m using an express app to read the data out and send it to a jade file for displaying.</p>

<figure class='code'><figcaption><span>Reading data from mongodb in nodejs using mongoose  - read.js </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;/blog/:id&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">){</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">req</span><span class="p">.</span><span class="nx">user</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">username</span> <span class="o">=</span> <span class="nx">req</span><span class="p">.</span><span class="nx">user</span><span class="p">.</span><span class="nx">username</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="c1">//get the example</span>
</span><span class='line'>    <span class="nx">models</span><span class="p">.</span><span class="nx">posts</span><span class="p">.</span><span class="nx">findById</span><span class="p">(</span><span class="nx">req</span><span class="p">.</span><span class="nx">params</span><span class="p">.</span><span class="nx">id</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">data</span><span class="p">){</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">models</span><span class="p">.</span><span class="nx">users</span><span class="p">.</span><span class="nx">findOne</span><span class="p">({</span><span class="nx">name</span><span class="o">:</span> <span class="nx">username</span><span class="p">},</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">userdata</span><span class="p">){</span>
</span><span class='line'>         <span class="c1">//render the view page</span>
</span><span class='line'>         <span class="nx">res</span><span class="p">.</span><span class="nx">render</span><span class="p">(</span><span class="s1">&#39;blog.jade&#39;</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>             <span class="nx">locals</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>               <span class="nx">title</span><span class="o">:</span> <span class="nx">data</span><span class="p">.</span><span class="nx">title</span><span class="p">,</span>
</span><span class='line'>               <span class="nx">page</span><span class="o">:</span> <span class="s1">&#39;&#39;</span><span class="p">,</span>
</span><span class='line'>               <span class="nx">article</span><span class="o">:</span> <span class="nx">data</span><span class="p">,</span>
</span><span class='line'>               <span class="nx">user</span><span class="o">:</span> <span class="nx">username</span><span class="p">,</span>
</span><span class='line'>               <span class="nx">userdata</span><span class="o">:</span> <span class="nx">userdata</span>
</span><span class='line'>             <span class="p">}</span>
</span><span class='line'>         <span class="p">});</span>
</span><span class='line'>        <span class="p">});</span>
</span><span class='line'>      <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">res</span><span class="p">.</span><span class="nx">redirect</span><span class="p">(</span><span class="s1">&#39;/404&#39;</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>  <span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>There are no differences here reading from a mongodb doc that has nested data vs non nested data.</p>

<h3>3. Output the data in jade.</h3>

<p>There are two each loops that run through the nested data.  If there are multiple nested data on a page, like the main page of the blog, then you can loop through the blog articles and then have a sub loop for each of the comment sections.</p>

<figure class='code'><figcaption><span>Displaying nested data in jade  - blog.jade </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='jade'><span class='line'><span class="p">-</span> <span class="n">each</span> <span class="n">like</span> <span class="n">in</span> <span class="n">article</span><span class="o">.</span><span class="n">likes</span>
</span><span class='line'>  <span class="p">-</span> <span class="n">i</span><span class="o">++;</span>
</span><span class='line'><span class="nt">button</span><span class="nc">.btn.like</span>(<span class="na">type=</span><span class="s">&quot;button&quot;</span><span class="err">,</span> <span class="na">id=</span><span class="s">&quot;like_#{article.id}&quot;</span>)
</span><span class='line'>  <span class="nt">i</span><span class="nc">.icon-thumbs-up</span>
</span><span class='line'>  | Like
</span><span class='line'><span class="p">-</span> <span class="n">each</span> <span class="n">comment</span> <span class="n">in</span> <span class="n">article</span><span class="o">.</span><span class="n">comments</span>
</span><span class='line'>  <span class="p">-</span> <span class="n">j</span><span class="o">++;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>4. Posting data to mongodb</h3>

<p>In order for the app to be useful there has to be some way for users to like and comment on articles.  Here is an example of an express route for commenting on an article.</p>

<figure class='code'><figcaption><span>comment on an article express route  - comment.js </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">post</span><span class="p">(</span><span class="s1">&#39;/comment&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">){</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">req</span><span class="p">.</span><span class="nx">user</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">models</span><span class="p">.</span><span class="nx">users</span><span class="p">.</span><span class="nx">findOne</span><span class="p">({</span><span class="nx">name</span><span class="o">:</span> <span class="nx">req</span><span class="p">.</span><span class="nx">user</span><span class="p">.</span><span class="nx">username</span><span class="p">},</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">userdata</span><span class="p">){</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">picture</span> <span class="o">=</span> <span class="nx">userdata</span><span class="p">.</span><span class="nx">photo</span><span class="p">;</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">now</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Date</span><span class="p">();</span>
</span><span class='line'>        <span class="nx">blog_id</span> <span class="o">=</span> <span class="nx">req</span><span class="p">.</span><span class="nx">param</span><span class="p">(</span><span class="s1">&#39;blog_id&#39;</span><span class="p">);</span>
</span><span class='line'>        <span class="nx">models</span><span class="p">.</span><span class="nx">posts</span><span class="p">.</span><span class="nx">findById</span><span class="p">(</span><span class="nx">blog_id</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">blog</span><span class="p">){</span>
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="k">return</span> <span class="nx">handleError</span><span class="p">(</span><span class="nx">err</span><span class="p">);</span>
</span><span class='line'>          <span class="nx">blog</span><span class="p">.</span><span class="nx">comments</span><span class="p">.</span><span class="nx">push</span><span class="p">({</span><span class="nx">user</span><span class="o">:</span> <span class="nx">req</span><span class="p">.</span><span class="nx">user</span><span class="p">.</span><span class="nx">username</span><span class="p">,</span> <span class="nx">user_photo</span><span class="o">:</span> <span class="nx">picture</span><span class="p">,</span> <span class="nx">body</span><span class="o">:</span> <span class="nx">req</span><span class="p">.</span><span class="nx">param</span><span class="p">(</span><span class="s1">&#39;comment&#39;</span><span class="p">),</span> <span class="nx">date_commented</span><span class="o">:</span> <span class="nx">now</span><span class="p">});</span>
</span><span class='line'>          <span class="kd">var</span> <span class="nx">doc</span> <span class="o">=</span> <span class="nx">blog</span><span class="p">.</span><span class="nx">comments</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
</span><span class='line'>          <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">doc</span><span class="p">);</span>
</span><span class='line'>          <span class="nx">blog</span><span class="p">.</span><span class="nx">save</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;error check&#39;</span><span class="p">);</span>
</span><span class='line'>            <span class="k">if</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span> <span class="k">throw</span> <span class="nx">err</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>            <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;saved&#39;</span><span class="p">);</span>
</span><span class='line'>            <span class="nx">res</span><span class="p">.</span><span class="nx">redirect</span><span class="p">(</span><span class="s1">&#39;/blog/&#39;</span><span class="o">+</span><span class="nx">blog_id</span><span class="p">);</span>
</span><span class='line'>          <span class="p">});</span>
</span><span class='line'>        <span class="p">});</span>
</span><span class='line'>      <span class="p">});</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you see an area where the code can be improved let me know.  I&#8217;d like to incorporate all of this into a framework at some point.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What Entrepreneurs can Learn from LOST]]></title>
    <link href="http://abemassry.com/blog/2012/12/03/what-entrepreneurs-can-learn-from-lost/"/>
    <updated>2012-12-03T11:01:00-05:00</updated>
    <id>http://abemassry.com/blog/2012/12/03/what-entrepreneurs-can-learn-from-lost</id>
    <content type="html"><![CDATA[<p>The TV show Lost managed to nail three things right in the product category: the right product, the right place, and the right time.</p>

<p>Originally I didn’t catch Lost when it aired on TV, I marathoned all the seasons when they were released on netflix.  But after watching the show I could see why my friends and coworkers were hooked.  I didn’t put the connection together till now, of how the show could be applied to everyday life.</p>

<h2>It was one of the first shows to wholeheartedly make the jump to HD.</h2>

<p>When it first aired to when it ended, it made the jump to HD and was better for it.  The cinematographers really took advantage of not only the higher resolutions but also the lush landscapes that were present in the show because they were shooting on location.  This had to do with the timing and taking advantage of the technology that was present at the time.</p>

<h2>It was available on DVD after the season had aired.</h2>

<p>While DVD is not an HD viewing experience per se, the quality was a lot better than VHS tapes.  And while there were other shows that did this as well, they nailed this one as well.</p>

<h2>It was available for online streaming.</h2>

<p>Hulu was starting to come out with content at the time, but ABC had its own streaming solution from its site.  Whether or not you agree with either of these, people could still watch it on the internet at their leisure, not encumbered by when it aired.  They could also see higher quality video then if they had set their VCRs to record it.  In addition DVRs were starting to come into prominence and it had the same benefit as online streaming when it came to picture quality.</p>

<p>So I keep belaboring quality when it comes to all these things, what made this particular show so special, there were other HD shows at the time, some of them even filmed on location.  It was the fact that it was filmed on location with an almost cinema quality, the writing was able to capture the audience in a way that kept them coming back week after week and the actors were able to execute the story in a way that it was believable that they were trapped on this faraway island.</p>

<p>In total they had the right product, the right team to execute it, and they benefitted from producing the show at the right time that all of these auxiliary technologies came together and facilitated getting the product produced at a high quality into the hands of the viewers.  They also had the insight to know which tech to pursue and how to use it effectively.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Observations on mashrd]]></title>
    <link href="http://abemassry.com/blog/2012/10/23/observations-on-mashrd/"/>
    <updated>2012-10-23T15:40:00-04:00</updated>
    <id>http://abemassry.com/blog/2012/10/23/observations-on-mashrd</id>
    <content type="html"><![CDATA[<p>Just a quick observation, it seems like more stories that make it to the popular section are about either politics or Apple products.  I might make a chart and have graphs to back up my observations next time.  But it makes sense given the time of year it is and the election is happening in a week and Apple just unveiled more products.  Still there is a lot of news that doesn&#8217;t see the light of day.  Not sure if it&#8217;s a good thing or a bad thing.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[mashrd update]]></title>
    <link href="http://abemassry.com/blog/2012/10/23/mashrd-update/"/>
    <updated>2012-10-23T15:23:00-04:00</updated>
    <id>http://abemassry.com/blog/2012/10/23/mashrd-update</id>
    <content type="html"><![CDATA[<p>Just wanted to tell you about some of the design choices for mashrd. I wanted to support the big social networks to start out with. I really wanted to have App.net but I could not find a button for them. Buffer, bufferapp.com has a button but I had trouble integrating it and I will delve deeper into the API soon. The other issue is for the popular page the network with the highest count gets the button. So that is usually Facebook or Twitter. When App.net has a button I can make a companion site with App.net as it&#8217;s own news listing site, if there is demand for it.  I co-posted this post on the mashrd about page as well as here. <a href="http://mashrd.com/about">About mashrd</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[mashrd]]></title>
    <link href="http://abemassry.com/blog/2012/10/23/mashrd/"/>
    <updated>2012-10-23T14:53:00-04:00</updated>
    <id>http://abemassry.com/blog/2012/10/23/mashrd</id>
    <content type="html"><![CDATA[<h1>mashrd - Real-time News with Node.js and socket.io</h1>

<p>TL;DR version: I made a new site called <a href="http://mashrd.com">mashrd</a>, check it out and let me know what you think.</p>

<p>I wanted to try out node.js and socket.io but I wasn&#8217;t sure what kind of webapp I wanted to build with the technology.  I usually try to build something that isn&#8217;t out there yet and something that hasn&#8217;t been done before, at least to my knowledge.  So I&#8217;ve had this idea for a while about a news twitter mashup where the site was organized like reddit or the old digg but using tweets instead.  After looking at some of the data I was getting I decided to include facebook likes and google plus shares.</p>

<p>The first issue was learning node.js for that I went through all of Pedro Teixeira&#8217;s <a href="http://http://nodetuts.com/">Node Tuts</a> videos.  They were very informative and while some of the code that he was using has changed based on the new versions of the software, it really helped because of his choice in exercises.  He showed many parts of the ecosystem for node.js and when the code had changed you could either look in the comments on the same page or, some quick googling could find the right answer.</p>

<h3>Real-time News</h3>

<p>After getting the real-time aspect of the site working from a websockets point of view I needed some actual news on the site.  This could be done by manually submitting but it would require a massive army of submitters.  I used feeds from various news sites most of which I read and some that I found out about by making this site.  I also tried to keep the listing of sites level from all sides, while people on the news fringes will still find something interesting to read.  If you have a site that you think should be included, send me an email or a tweet.</p>

<h3>app.net</h3>

<p>I really wanted to include app.net but I could not find an app.net button.  When app.net gets a button (or I find it) I would like to make a site like this one specifically for app.net because I like the mission and it deserves its own webapp.</p>

<h3>Feedback</h3>

<p>Try it out and let me know what you think.  I&#8217;ll scour these comments obsessively to get feedback and try to change anything I see.  Thanks for taking a look.</p>

<p><a href="http://mashrd.com">mashrd - Real-time News Now</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[First Post]]></title>
    <link href="http://abemassry.com/blog/2012/10/22/first-post/"/>
    <updated>2012-10-22T14:52:00-04:00</updated>
    <id>http://abemassry.com/blog/2012/10/22/first-post</id>
    <content type="html"><![CDATA[<p>The very first post of this fine blog.</p>
]]></content>
  </entry>
  
</feed>
